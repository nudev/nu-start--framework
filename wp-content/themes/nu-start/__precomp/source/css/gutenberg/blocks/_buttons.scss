/* 
	?		button block styling
*/

// ? handle the default state for buttons ( no color customizations yet )
.wp-block-button {
	.wp-block-button__link {
		border-width: 1px;
		@extend %transition;
	}
	&:not(.is-style-outline) {
		.wp-block-button__link {
			// ? avoid having to override this later if there are custom colors involved
			&:not(.has-background):not(.has-text-color) {
				border: 1px solid transparent;
				&:hover,
				&:focus {
					border: 1px solid;
					background-color: var(--wp--preset--color--white-1);
					color: var(--wp--preset--color--black-1);
					border-color: var(--wp--preset--color--black-1);
				}
			}
		}
	}
	&.is-style-outline {
		.wp-block-button__link {
			// ? avoid having to override this later if there are custom colors involved
			&:not(.has-background):not(.has-text-color) {
				&:hover,
				&:focus {
					background-color: var(--wp--preset--color--black-1);
					color: var(--wp--preset--color--white-1);
					border-color: var(--wp--preset--color--black-1);
				}
			}
		}
	}
	.wp-block-button__link {
		&.has-background {
			padding: $base-margin;
		}
	}
}

.wp-block-button {
	&.is-style-outline {
		.wp-block-button__link {
			&.has-background {
				background-color: transparent !important;
			}
		}
	}
}

// ?
$color_list: (
	"black",
	"white",
	"red",
	"blue",
	"green",
	"orange",
	"yellow",
	"magenta"
);
@for $i from 1 through 5 {
	@each $name in $color_list {
		// ? hoist the var() name
		$realName: #{$name}-#{$i};
		// ? hoist the var() value
		$color: var(--wp--preset--color--#{$realName});

		// ? dodge the outline style class / is-default-style
		// * IS NOT STYLE OUTLINE
		.wp-block-button:not(.is-style-outline) {
			// ? has-background
			.wp-block-button__link.has-#{$realName}-background-color {
				border: 1px solid $color;
				&:hover,
				&:focus {
					color: $color;
					border: 1px solid $color;
					background-color: var(
						--wp--preset--color--white-1
					) !important;
				}

				&.has-text-color {
					border-color: $color !important;
					&:hover,
					&:focus {
						border-color: $color !important;
					}
				}
			}

			// ? has-text-color
			.wp-block-button__link.has-#{$realName}-color {
				// ? has-text-color, AND no-background
				&:not(.has-background) {
					&:hover,
					&:focus {
						background-color: $color !important;
						color: var(--wp--preset--color--white-1) !important;
					}
				}
				&.has-background {
					&:hover,
					&:focus {
						color: currentColor !important;
					}
				}

				&.has-white-#{$i}-color {
					border: 1px
						solid
						var(--wp--preset--color--black-1) !important;
					&:hover,
					&:focus {
						border: 1px
							solid
							var(--wp--preset--color--black-1) !important;
						color: var(--wp--preset--color--black-1) !important;
					}
				}
			}
		}

		// ? is style outline here
		.wp-block-button.is-style-outline {
			// ? has-text-color
			.wp-block-button__link.has-#{$realName}-color {
				&:hover,
				&:focus {
					border-color: $color !important;
					background-color: $color !important;
					color: white !important;
				}
			}

			// ? has-background
			.wp-block-button__link.has-#{$realName}-background-color {
				// ? has-background AND no-text-color
				&:not(.has-text-color) {
					color: $color;
					&:hover,
					&:focus {
						border: 1px solid $color !important;
						background-color: $color !important;
						color: var(--wp--preset--color--white-1) !important;
					}
				}

				&.has-text-color {
					color: $color !important;
					border: 1px solid $color !important;
					&:hover,
					&:focus {
						background-color: $color !important;
						color: var(--wp--preset--color--white-1) !important;
					}
				}
			}
		}
	}
}
