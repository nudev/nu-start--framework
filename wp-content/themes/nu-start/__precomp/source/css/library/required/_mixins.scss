



/* 
	because the block may or may not be loaded when we call this in (the posts grid just calls it in for now)
*/
@mixin nu__date_time_block_styles() {
	display: flex;
	flex-flow: column nowrap;
	justify-content: center;

	span {
		letter-spacing: 0;
		font-weight: normal;
	}

	$scheduleIcon: "\e8b5";
	$eventIcon: "\e878";

	.nu__datetime-times {
		@include nu_micon($scheduleIcon, before);
	}
	.nu__datetime-dates {
		margin-top: $base-margin;
		@include nu_micon($eventIcon, before);
	}
	.nu__datetime-times,
	.nu__datetime-dates {
		color: #545454;
		font-size: var(--wp--preset--font-size--16-24);
		line-height: 16px;
		margin: $half-margin 0 0 0;
		&:first-child {
			margin: 0;
		}
		&:before {
			vertical-align: text-bottom;
			display: inline-block;
			font-size: 16px;
			margin-right: $half-margin;
			line-height: 1;
		}
	}
}

@mixin flush_inner_content_vertical {
	// reduces overall vertical space
	> *:first-child {
		margin-top: 0;
	}
	> *:last-child {
		margin-bottom: 0;
	}
}

@mixin center_absolute() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin displayedInvisible() {
	visibility: hidden;
	position: absolute;
	left: -9999px;
	height: 0;
	overflow: hidden;
	min-height: 0px;
}

@mixin reset_list_styling {
	padding-left: 1.5rem;

	li {
		padding-bottom: 0.5rem;

		&:last-child {
			padding-bottom: 0;
		}

		ul,
		ol {
			padding-top: 0.5rem;
		}
	}

	&.wp-block-gallery {
		padding-left: 0;

		li {
			padding-bottom: 0;
		}
	}
}

/**
 * Clearfix
 *
 */
@mixin clearfix() {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

@mixin bgImage {
	background: var(--wp--preset--color--black-1);
	background-position: center center;
	background-repeat: no-repeat;
	background-size: cover;
}

// ? these shadows are approved by design ( matches figma v1 design review )
@mixin nu__boxshadow($depth: 0) {
	@if ($depth==0) {
		box-shadow: 0px 1px 2px transparent;
	}
	@if ($depth==1) {
		box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.05);
	}
	@if ($depth==2) {
		box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1),
			0px 1px 2px rgba(0, 0, 0, 0.06);
	}
	@if ($depth==3) {
		box-shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.1),
			0px 2px 4px -1px rgba(0, 0, 0, 0.06);
	}
	@if ($depth==4) {
		box-shadow: 0px 10px 15px -3px rgba(0, 0, 0, 0.1),
			0px 4px 6px -2px rgba(0, 0, 0, 0.05);
	}
	@if ($depth==5) {
		box-shadow: 0px 20px 25px -5px rgba(0, 0, 0, 0.1),
			0px 10px 10px -5px rgba(0, 0, 0, 0.04);
	}
	@if ($depth==6) {
		box-shadow: 0px 25px 50px -12px rgba(0, 0, 0, 0.25);
	}
}

@mixin accentUnderline($el: before, $h: 2px, $d: right) {
	position: relative;

	padding-bottom: #{$h}; // ? enable to add padding for the underline

	&:#{$el} {
		content: "";
		display: block;
		width: 0;
		height: 0;
		position: absolute;
		border-bottom: $h solid currentColor;
		bottom: -#{$h};

		transition: all 0.1s ease-in-out;

		@if $d==right {
			left: 0;
			right: auto;
		} @else if $d==left {
			right: 0;
			left: auto;
		}
	}
}

// ? padding-top is used to manually proportion images that fill a specific size
// ? <img> tags do not ever use this
// ? div.bgimage--container uses this, with ANY inner content absolutely positioned.
// ? for anything more complex than the bgimage case; essentially use a .content in its place
@mixin aspect-ratio($w, $h) {
	position: relative;

	&:before {
		display: block;
		content: "";
		width: 100%;
		padding-top: (math.div($h, $w) * 100%);
	}
}

@mixin nu_micon($c: "", $el: before) {
	position: relative;

	&:#{$el} {
		content: $c;
		// code block below pulled from the .material-icons class (recommended / required to properly display icons on all browsers)
		font-family: "Material Icons";
		font-weight: normal;
		font-style: normal;
		font-size: 24px;
		line-height: 1;
		line-height: inherit;
		letter-spacing: normal;
		text-transform: none;
		display: inline-block;
		vertical-align: middle;
		white-space: nowrap;
		word-wrap: normal;
		direction: ltr;
		font-feature-settings: "liga";
		-moz-font-feature-settings: "liga";
		-moz-osx-font-smoothing: grayscale;
	}
}

// ? this is older code that handles a grid layout using flexbox
// ? we disabled it for now; to use CSS Grid instead; but there may be cases it wont work
// @mixin nuGrid($w, $c, $gX, $gY: $gX) {
// 	> ul {
// 		list-style-type: none;
// 		list-style: none;
// 		display: flex;
// 		flex-flow: row wrap;
// 		> li {
// 			$basis: calc((#{$w} - ((#{$c} - 1) * #{$gX})) / #{$c});
// 			flex: 0 1 $basis;
// 			margin: 0 $gX $gY 0; // set item margins

// 			&:nth-child(n + 1) {
// 				margin: 0 $gX $gY 0; // reset next item margins
// 			}

// 			&:nth-child(#{$c}n) {
// 				margin: 0 0 $gY 0; // clip margin-right for nth-column
// 			}
// 		}
// 	}
// }

@mixin nuGrid($w, $c, $gX, $gY: $gX) {
	$w: 100%;
	//
	> ul {
		max-width: 100%;
		display: grid;
		grid-row-gap: $gX;
		grid-column-gap: $gY;
		grid-template-columns: repeat($c, 1fr);
		// grid-template-columns: repeat($c, minmax(300px, 1fr));
	}
}

@mixin nu__responsive_grid_layout() {
	// ? set margins and width variables
	$gX: 30px;
	$gY: 30px;
	$w: 100%;

	@for $n from 1 through 7 {
		// ? any number of columns default layout
		&.cols-#{$n} {
			@include nuGrid($w, $n, $gX, $gY);
		}
	}
	@include media("<=xlarge") {
		// ? restrict max-cols in the layout to 5
		@for $n from 6 through 7 {
			&.cols-#{$n} {
				@include nuGrid($w, 5, $gX, $gY);
			}
		}
	}

	@include media("<=large") {
		// ? restrict max-cols in the layout to 4
		@for $n from 5 through 7 {
			&.cols-#{$n} {
				@include nuGrid($w, 4, $gX, $gY);
			}
		}
	}

	@include media("<=medium") {
		// ? restrict max-cols in the layout to 3
		@for $n from 4 through 7 {
			&.cols-#{$n} {
				@include nuGrid($w, 3, $gX, $gY);
			}
		}
	}

	@include media("<=small") {
		// ? restrict max-cols in the layout to 2
		@for $n from 3 through 7 {
			&.cols-#{$n} {
				@include nuGrid($w, 2, $gX, $gY);
			}
		}
	}

	@include media("<=phone") {
		// ? restrict max-cols in the layout to 1
		@for $n from 2 through 7 {
			&.cols-#{$n} {
				@include nuGrid($w, 1, $gX, $gY);
			}
		}
	}
}
// ? basics for aspect ratio for all items here
@mixin nu__grid_item_cover_ratios {
	figure {
		overflow: hidden;
		position: relative;
		margin: 0;
	}
	img {
		width: 100%;
		min-height: 100%;
	}

	&.has-very-wide-cover-image,
	&.has-wide-cover-image,
	&.has-tall-cover-image,
	&.has-very-tall-cover-image,
	&.has-square-cover-image {
		img {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			transform: scale(1);
		}
	}
	&.has-square-cover-image {
		figure {
			@include aspect-ratio(1, 1);
		}
	}
	&.has-wide-cover-image {
		figure {
			@include aspect-ratio(4, 3);
		}
	}
	&.has-very-wide-cover-image {
		figure {
			@include aspect-ratio(16, 9);
		}
	}
	&.has-tall-cover-image {
		figure {
			@include aspect-ratio(3, 4);
		}
	}
	&.has-very-tall-cover-image {
		figure {
			@include aspect-ratio(9, 16);
		}
	}
}
// ? basics for horz/vert orientation here
@mixin nu__grid_item_orientation {
	&.has-layout-horizontal {
		> .contains-clickable-area,
		& {
			@media screen and (min-width: 781px) {
				flex-flow: row nowrap;
				> figure {
					// flex: 1 1 auto;
				}
				> .grid-item-content {
					flex: 1 1 auto;
				}
			}
		}
	}
}
